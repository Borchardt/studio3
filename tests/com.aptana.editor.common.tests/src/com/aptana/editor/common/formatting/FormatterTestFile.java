package com.aptana.editor.common.formatting;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;

import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Platform;
import org.eclipse.text.edits.MultiTextEdit;
import org.eclipse.text.edits.ReplaceEdit;
import org.eclipse.text.edits.TextEdit;

import com.aptana.formatter.IScriptFormatter;
import com.aptana.formatter.IScriptFormatterFactory;

/**
 * FormatterTestFile <br>
 * 
 * This class provides the basic functionality that should be used for all formatting test files. A formatting test file
 * is divided into different sections using tags surrounded by "==" (These tags need to be in its own separate tag). The
 * first tag should be "==PREFS==", followed by the preferences for that particular test. The second tag should be
 * "==CONTENT==", followed by the original content before it is formatted. If this is the first time the test is run,
 * the formatted content can be generated by calling the generateFormattedContent() method (You will need to make sure
 * the test file ends with a newline or the generateFormattedContent() method may not work correctly). A "==FORMATTED=="
 * tag should be added along with the formatted content.
 */

public class FormatterTestFile
{

	protected String content = ""; //$NON-NLS-1$
	protected String formattedContent = ""; //$NON-NLS-1$
	protected HashMap<String, String> prefs;
	protected String formatting_folder;
	protected String formatterId;
	protected IScriptFormatter formatter;
	protected String filename;

	protected static enum Tag
	{
		PREFS, CONTENT, FORMATTED, INVALID
	}

	public FormatterTestFile(IScriptFormatterFactory factory, String formatterId, String filename,
			String formattingFolder)
	{
		this.formatterId = formatterId;
		this.formatting_folder = formattingFolder;
		this.filename = formattingFolder + "/" + filename; //$NON-NLS-1$
		prefs = new HashMap<String, String>();
		try
		{
			parseFile();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		this.formatter = factory.createFormatter(System.getProperty("line.separator"), prefs); //$NON-NLS-1$
	}

	private void parseFile() throws IOException
	{

		InputStream stream = FileLocator.openStream(Platform.getBundle(formatterId), Path.fromPortableString(filename),
				false);
		BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
		String lineRead = reader.readLine();
		String lineReadBuffer = ""; //$NON-NLS-1$

		// We assume the first tag is the preference tag
		Tag tag = Tag.PREFS;

		while (lineRead != null)
		{
			if (lineRead.matches("[ ]*==[A-Z]+==")) //$NON-NLS-1$
			{
				tag = extractTag(lineRead);
				lineRead = reader.readLine();
			}
			else
			{
				lineReadBuffer = reader.readLine();
				storeLineByState(lineRead, tag, true);
				lineRead = lineReadBuffer;
			}
		}

		reader.close();
	}

	public String getContent()
	{
		return content;
	}

	public String getFormattedContent()
	{
		return formattedContent;
	}

	public IScriptFormatter getFormatter()
	{
		return formatter;
	}

	public void generateFormattedContent() throws IOException
	{
		if (formattedContent.equals("")) //$NON-NLS-1$
		{
			FileWriter formattedStream;

			formattedStream = new FileWriter(new File(filename), true);
			TextEdit formattedTextEdit = formatter.format(content, 0, content.length(), 0, false, null);

			formattedStream.write("==FORMATTED==\n"); //$NON-NLS-1$

			if (formattedTextEdit instanceof ReplaceEdit)
			{
				formattedStream.write(((ReplaceEdit) formattedTextEdit).getText());
				formattedContent = ((ReplaceEdit) formattedTextEdit).getText();
			}
			else if ((formattedTextEdit instanceof MultiTextEdit))
			{
				// write original content if the formatted text is same as original
				formattedStream.write(content);
				formattedContent = content;
			}

			formattedStream.close();
			// if formatting fails, we don't write anything
		}
	}

	protected void storeLineByState(String line, Tag tag, boolean addNewLine)
	{
		switch (tag)
		{
			case CONTENT:
				content += line;
				if (addNewLine)
				{
					content += "\n"; //$NON-NLS-1$
				}
				break;
			case FORMATTED:
				formattedContent += line;
				if (addNewLine)
				{
					formattedContent += "\n"; //$NON-NLS-1$
				}
				break;
			case PREFS:
				// add it to the preferences hashmap
				String[] prefsBuffer = line.split("="); //$NON-NLS-1$
				if (prefsBuffer.length == 2)
				{
					prefs.put(prefsBuffer[0], prefsBuffer[1]);
				}
		}
	}

	protected Tag extractTag(String text)
	{
		text = text.replaceAll("==", ""); //$NON-NLS-1$ //$NON-NLS-2$
		text = text.replace(" ", "");
		Tag tag;
		if (text.equals(Tag.PREFS.toString()))
		{
			tag = Tag.PREFS;
		}
		else if (text.equals(Tag.CONTENT.toString()))
		{
			tag = Tag.CONTENT;
		}
		else if (text.equals(Tag.FORMATTED.toString()))
		{
			tag = Tag.FORMATTED;
		}
		else
		{
			tag = Tag.INVALID;
		}
		return tag;

	}
}
