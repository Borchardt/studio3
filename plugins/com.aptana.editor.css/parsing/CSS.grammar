// java -jar beaver.jar -T -w CSS.grammar
%package "com.aptana.editor.css.parsing";

%class "CSSParser";

%import "java.util.ArrayList";
%import "java.util.List";
%import "com.aptana.editor.css.parsing.ast.*";
%import "com.aptana.parsing.IParseState";
%import "com.aptana.parsing.IParser";
%import "com.aptana.parsing.ast.IParseRootNode";
%import "com.aptana.parsing.ast.ParseRootNode";
%import "com.aptana.parsing.lexer.IRange";

%terminals AT_RULE, CHARSET, IMPORT, MEDIA, PAGE, FONTFACE, NAMESPACE, LPAREN;
%terminals SEMICOLON, COLON, COMMA, LCURLY, RCURLY, LBRACKET, RBRACKET, RPAREN, SLASH;
%terminals MINUS, PLUS, EQUAL, STAR, GREATER;
%terminals IDENTIFIER, STRING, URL, NUMBER, CLASS, LENGTH, EMS, EXS, ANGLE, TIME, FREQUENCY, COLOR, PERCENTAGE;
%terminals IMPORTANT, PROPERTY, SELECTOR, HASH, INCLUDES, DASHMATCH;

%typeof IDENTIFIER, PROPERTY, STRING, URL, IMPORTANT, NUMBER, PERCENTAGE, LENGTH, EMS, EXS, ANGLE, TIME, FREQUENCY, COLOR = "String";
%typeof HASH, CLASS, LBRACKET, RBRACKET, COLON, COMMA, PLUS, GREATER = "String";
%typeof Statement = "CSSNode";
%typeof Declaration = "CSSDeclarationNode";
%typeof Declarations = "List<CSSDeclarationNode>";
%typeof Expression, Function, Term = "CSSExpressionNode";
%typeof ImportWord, Identifier, IdentiferOrString, Separator, Primitive, TypeOrUniversalSelector, AttributeValueOperator = "String";
%typeof AttributeSelector = "CSSAttributeSelectorNode";
%typeof List = "List<CSSTextNode>";
%typeof Selectors = "List<CSSSelectorNode>";
%typeof Selector = "CSSSelectorNode";
%typeof SimpleSelector = "CSSSimpleSelectorNode";
%typeof Combinator = "String";

%implements "IParser";

%embed {:
	// suppress the error printouts
	private static class CSSEvents extends Events
	{
		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}

	public synchronized IParseRootNode parse(IParseState parseState) throws java.lang.Exception
	{
		// grab source
		char[] characters = parseState.getSource();

		// make sure we have some source
		String source = (characters != null) ? new String(characters) : "";

		// create scanner and send source to it
		CSSScanner scanner = new CSSScanner();
		scanner.setSource(source);

		// parse
		ParseRootNode result = (ParseRootNode) parse(scanner);
		int start = parseState.getStartingOffset();
		int end = start + parseState.getSource().length;
		result.setLocation(start, end);

		// store results in the parse state
		parseState.setParseResult(result);

		// attach comments to parse root node
		IRange[] comments = scanner.getComments();
		CSSCommentNode[] commentNodes = new CSSCommentNode[comments.length];

		for (int i = 0; i < comments.length; i++)
		{
			IRange comment = comments[i];
			CSSCommentNode commentNode = new CSSCommentNode( //
				this.getSource(parseState, comment),
				comment.getStartingOffset(),
				comment.getEndingOffset()
			);

			commentNodes[i] = commentNode;
		}

		result.setCommentNodes(commentNodes);

		return result;
	}

	private String getSource(IParseState parseState, IRange comment)
	{
		char[] src = parseState.getSource();
		int length = comment.getLength();
		char[] dest = new char[length];

		System.arraycopy(src, comment.getStartingOffset(), dest, 0, length);

		return new String(dest);
	}
:};

%init {:
		report = new CSSEvents();
:};

%goal Program;

Program
	=	Statements.p
		{:
			return new CSSParseRootNode(p);
		:}
	|	{:
			return new CSSParseRootNode();
		:}
	;

Statements
	=	Statements Statement
	|	Statement
	;

Statement
	=	CharSet
	|	Import
	|	Media
	|	Page
	|	FontFace
	|	Namespace
	|	AtRule
	|	Rule
	;

CharSet
	=	CHARSET STRING.s SEMICOLON
		{:
			return new CSSCharSetNode(s);
		:}
	;

Import
	=	IMPORT ImportWord.s SEMICOLON
		{:
			return new CSSImportNode(s);
		:}
	|	IMPORT ImportWord.s List.w SEMICOLON
		{:
			return new CSSImportNode(s, w.toArray(new CSSTextNode[w.size()]));
		:}
	;

Media
	=	MEDIA List.l LCURLY RCURLY
		{:
			return new CSSMediaNode(l.toArray(new CSSTextNode[l.size()]));
		:}
	|	MEDIA List.l LCURLY Statements.s RCURLY
		{:
			return new CSSMediaNode(l.toArray(new CSSTextNode[l.size()]), s);
		:}
	;

Page
	=	PAGE LCURLY RCURLY
		{:
			return new CSSPageNode();
		:}
	|	PAGE LCURLY Declarations.d RCURLY
		{:
			return new CSSPageNode(d);
		:}
	|	PAGE COLON IDENTIFIER.s LCURLY RCURLY
		{:
			CSSPageSelectorNode pageSelector = new CSSPageSelectorNode(s);
			CSSPageNode result = new CSSPageNode();

			pageSelector.setLocation(_symbol_s.getStart(), _symbol_s.getEnd());
			result.setSelector(pageSelector);

			return result;
		:}
	|	PAGE COLON IDENTIFIER.s LCURLY Declarations.d RCURLY
		{:
			CSSPageSelectorNode pageSelector = new CSSPageSelectorNode(s);
			CSSPageNode result = new CSSPageNode(d);

			pageSelector.setLocation(_symbol_s.getStart(), _symbol_s.getEnd());
			result.setSelector(pageSelector);

			return result;
		:}
	;

FontFace
	=	FONTFACE LCURLY RCURLY
		{:
			return new CSSFontFaceNode();
		:}
	|	FONTFACE LCURLY Declarations.d RCURLY
		{:
			return new CSSFontFaceNode(d);
		:}
	;

Namespace
	=	NAMESPACE ImportWord.w SEMICOLON
		{:
			return new CSSNamespaceNode(w);
		:}
	|	NAMESPACE IDENTIFIER.i ImportWord.w SEMICOLON
		{:
			return new CSSNamespaceNode(i, w);
		:}
	;

AtRule
	=	AT_RULE STRING SEMICOLON
	|	AT_RULE STRING LCURLY RCURLY
	;

// TODO: We probably want some collection nodes, one to hold selectors and one to hold
// declarations. Since these would be true CSSNodes, parent relationships would be setup
// properly during parsing. However, until then, we need to wire up the parents here
Rule
	=	Selectors.s LCURLY RCURLY
		{:
			CSSRuleNode result = new CSSRuleNode(s);

			for (CSSSelectorNode selector : s)
			{
				selector.setParent(result);
			}

			return result;
		:}
	|	Selectors.s LCURLY Declarations.d RCURLY
		{:
			CSSRuleNode result = new CSSRuleNode(s, d);

			for (CSSSelectorNode selector : s)
			{
				selector.setParent(result);
			}

			CSSSelectorNode firstSelector = s.get(0);

			for (CSSDeclarationNode declaration : d)
			{
				declaration.setParent(firstSelector);
			}

			return result;
		:}
	|	error
	;

Function
	=	Identifier.i LPAREN Expression.e RPAREN
		{:
			return new CSSFunctionNode(i, e);
		:}
	;

List
	=	List COMMA IDENTIFIER.i
	{:
		List<CSSTextNode> list = (List<CSSTextNode>) _symbols[offset + 1].value;
		CSSTextNode text = new CSSTextNode(i);

		text.setLocation(_symbol_i.getStart(), _symbol_i.getEnd());
		list.add(text);

		return _symbols[offset + 1];
	:}
	|	IDENTIFIER.i
	{:
		List<CSSTextNode> list = new ArrayList<CSSTextNode>();
		CSSTextNode text = new CSSTextNode(i);

		text.setLocation(_symbol_i.getStart(), _symbol_i.getEnd());
		list.add(text);

		return new Symbol(list);
	:}
	;

Declarations
	=   Declaration.d
		{:
			List<CSSDeclarationNode> list = new ArrayList<CSSDeclarationNode>();

			list.add(d);

			return new Symbol(list);
		:}
	|   Declaration.d SEMICOLON.s
		{:
			List<CSSDeclarationNode> list = new ArrayList<CSSDeclarationNode>();

			d.setHasSemicolon(s);
			list.add(d);

			return new Symbol(list);
		:}
	|   Declarations.ds Declaration.d
		{:
			ds.add(d);

			return _symbols[offset + 1];
		:}
	|   Declarations.ds Declaration.d SEMICOLON.s
		{:
			d.setHasSemicolon(s);
			ds.add(d);

			return _symbols[offset + 1];
		:}
	;

Declaration
	=   Identifier.i COLON Expression.e
		{:
			return new CSSDeclarationNode(i, e);
		:}
	|   Identifier.i COLON Expression.e IMPORTANT.s
		{:
			return new CSSDeclarationNode(i, e, s);
		:}
	|   error
		{:
			return new CSSErrorDeclarationNode();
		:}
	;

Expression
	=	Expression.e Separator.s Term.t
		{:
			return new CSSTermListNode(e, t, s);
		:}
	|	Expression.e Term.t
		{:
			return new CSSTermListNode(e, t);
		:}
	|	Term
	|	error
		{:
			return new CSSErrorExpressionNode();
		:}
	;

Term
	=	Primitive.p
		{:
			return new CSSTermNode(p);
		:}
	|	Function
	;

Selectors
	=	Selectors.ss Combinator.c Selector.s
		{:
			CSSSelectorNode lastSelector = ss.get(ss.size() - 1);
			lastSelector.setCombinator(c);

			ss.add(s);

			return _symbols[offset + 1];
		:}
	|	Selector.s
		{:
			List<CSSSelectorNode> list = new ArrayList<CSSSelectorNode>();

			list.add(s);

			return new Symbol(list);
		:}
	;

Selector
	=	Selector.s SimpleSelector.ss
		{:
			s.addChild(ss);

			return s;
		:}
	|	SimpleSelector.ss
		{:
			CSSSelectorNode selector = new CSSSelectorNode();

			selector.addChild(ss);

			return selector;
		:}
	;

SimpleSelector
	=	TypeOrUniversalSelector.t AttributeSelectors.a
		{:
			return new CSSSimpleSelectorNode(t, a);
		:}
	|	TypeOrUniversalSelector.t
		{:
			return new CSSSimpleSelectorNode(t);
		:}
	|	AttributeSelectors.a
		{:
			return new CSSSimpleSelectorNode(a);
		:}
	;

AttributeSelectors
	=	AttributeSelectors AttributeSelector
	|	AttributeSelector
	;

AttributeSelector
	=	CLASS.c
		{:
			return new CSSAttributeSelectorNode(c);
		:}
	|	COLON.c Identifier.i
		{:
			return new CSSAttributeSelectorNode(c + i);
		:}
	|	COLON Function.f
		{:
			return new CSSAttributeSelectorNode(f);
		:}
	|	COLOR.c // this catches a case when a hash looks like a color
		{:
			return new CSSAttributeSelectorNode(c);
		:}
	|
		PROPERTY.p // this catches a case when an attribute looks like a property, most likely indicating a deficiency in our scanner
		{:
			return new CSSAttributeSelectorNode(p);
		:}
	|	HASH.h
		{:
			return new CSSAttributeSelectorNode(h);
		:}
	|	LBRACKET.l Identifier.i RBRACKET.r
		{:
			return new CSSAttributeSelectorNode(l + i + r);
		:}
	|	LBRACKET.l Identifier.i AttributeValueOperator.o IdentiferOrString.s RBRACKET.r
		{:
			return new CSSAttributeSelectorNode(l + i + " " + o + " " + s + r);
		:}
	;

ImportWord
	=	STRING
	|	URL
	;

Identifier
	=	IDENTIFIER
	|	PROPERTY
	;

IdentiferOrString
	=	IDENTIFIER
	|	STRING
	;

Separator
	=	SLASH
	|	COMMA
	|	PLUS
	|	MINUS
	;

Combinator
	=	COMMA
	|	PLUS
	|	GREATER
	;

Primitive
	=	NUMBER
	|	PERCENTAGE
	|	LENGTH
	|	EMS
	|	EXS
	|	ANGLE
	|	TIME
	|	FREQUENCY
	|	STRING
	|	IDENTIFIER
	|	URL
	|	COLOR
	;

TypeOrUniversalSelector
	=	IDENTIFIER
	|	STAR
	|	SELECTOR
	;

AttributeValueOperator
	=	EQUAL
	|	INCLUDES
	|	DASHMATCH
	;
