<!-- ===================================================================== -->
<!-- Custom targets called from a project's generated build.xml            -->
<!-- Set customBuildCallbacks=<path/to/this/file> in your build.properties.-->
<!-- ===================================================================== -->
<project name="Build specific targets and properties" default="noDefault">

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="This file must be called with explicit targets" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target build.jars                              -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder to contain the build results           -->
	<!-- ===================================================================== -->
	<target name="pre.build.jars">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target build.jars                               -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder to contain the build results           -->
	<!-- ===================================================================== -->
	<target name="post.build.jars">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target build.sources                           -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder to contain the build results           -->
	<!-- ===================================================================== -->
	<target name="pre.build.sources">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target build.sources                            -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder to contain the build results           -->
	<!-- ===================================================================== -->
	<target name="post.build.sources">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the compilation target <name>                      -->
	<!-- Substitute "name" with the name of the compilation target, eg @dot    -->
	<!-- Available parameters :                                                -->
	<!--   source.foldern : n = 1 ... N, the source folders                    -->
	<!--   target.folder  : where the results of the compilation go            -->
	<!--   <name>.classpath : name = name of the compilation target. A         -->
	<!--                      reference to the classpath structure.            -->
	<!-- ===================================================================== -->
	<target name="pre.name">
	</target>

	<target name="clone-bundle">
		<delete dir="${bundle.dir.name}" failonerror="true"/>
		<echo message="git clone git://github.com/aptana/${bundle.name}.git ${bundle.dir.name}"></echo>
		<exec executable="/bin/bash" dir="bundles">
			<arg value="-c" />
			<arg value="git clone git://github.com/aptana/${bundle.name}.git ${bundle.dir.name}" />
		</exec>
		<!-- Checkout the specified branch -->
		<echo message="git checkout ${bundle.branch}"></echo>
		<exec executable="/bin/bash" dir="bundles/${bundle.dir.name}">
			<arg value="-c" />
			<arg value="git checkout ${bundle.branch}" />
		</exec>
		<!-- Now checkout the revision of the bundle as of the latest commit date for red_core -->
		<echo message="git checkout `git rev-list -n 1 --before=${last.commit.date} ${bundle.branch}`"></echo>
		<exec executable="/bin/bash" dir="bundles/${bundle.dir.name}">
			<arg value="-c" />
			<arg value="git checkout `git rev-list -n 1 --before=${last.commit.date} ${bundle.branch}`" />
		</exec>
		<!-- Now remove the .git subdirectory -->
		<delete dir="bundles/${bundle.dir.name}/.git" quiet="true" />
	</target>

	<target name="pre.@dot">
	    <!-- Find last commit date for our normal repo, so we can checkout that time for each bundle... -->
		<exec executable="/bin/bash" dir="." outputproperty="last.commit.date">
			<arg value="-c" />
		  	<arg value="git log -1 --pretty=format:%ct" />
		</exec>
		<!-- Grab the pre-defined set of bundles -->
		<antcall target="clone-bundle">
		  	<param name="bundle.name" value="text.ruble" />
		  	<param name="bundle.dir.name" value="text.ruble" />
		  	<param name="bundle.branch" value="master" />
		</antcall>
		<antcall target="clone-bundle">
		  	<param name="bundle.name" value="source.ruble" />
		  	<param name="bundle.dir.name" value="source.ruble" />
		  	<param name="bundle.branch" value="master" />
		</antcall>
		<antcall target="clone-bundle">
		  	<param name="bundle.name" value="math.ruble" />
		  	<param name="bundle.dir.name" value="math.ruble" />
		  	<param name="bundle.branch" value="master" />
		</antcall>
		<antcall target="clone-bundle">
		  	<param name="bundle.name" value="ruby.ruble" />
		  	<param name="bundle.dir.name" value="ruby.ruble" />
		  	<param name="bundle.branch" value="master" />
		</antcall>
		<antcall target="clone-bundle">
		  	<param name="bundle.name" value="rails.ruble" />
		  	<param name="bundle.dir.name" value="rails.ruble" />
		  	<param name="bundle.branch" value="master" />
		</antcall>
		<antcall target="clone-bundle">
		  	<param name="bundle.name" value="html.ruble" />
		  	<param name="bundle.dir.name" value="html.ruble" />
		  	<param name="bundle.branch" value="origin/development" />
		</antcall>
		<antcall target="clone-bundle">
		  	<param name="bundle.name" value="css.ruble" />
		  	<param name="bundle.dir.name" value="css.ruble" />
		  	<param name="bundle.branch" value="master" />
		</antcall>
		<antcall target="clone-bundle">
		  	<param name="bundle.name" value="js.ruble" />
		  	<param name="bundle.dir.name" value="js.ruble" />
		  	<param name="bundle.branch" value="master" />
		</antcall>
		<antcall target="clone-bundle">
		  	<param name="bundle.name" value="xml.ruble" />
		  	<param name="bundle.dir.name" value="xml.ruble" />
			  	<param name="bundle.branch" value="master" />
		</antcall>
		<antcall target="clone-bundle">
		  	<param name="bundle.name" value="bundle-dev.ruble" />
		  	<param name="bundle.dir.name" value="bundle-development.ruble" />
		  	<param name="bundle.branch" value="master" />
		</antcall>
		<antcall target="clone-bundle">
		  	<param name="bundle.name" value="haml.ruble" />
		  	<param name="bundle.dir.name" value="haml.ruble" />
		  	<param name="bundle.branch" value="master" />
		</antcall>
		<antcall target="clone-bundle">
		  	<param name="bundle.name" value="sass.ruble" />
		  	<param name="bundle.dir.name" value="sass.ruble" />
		  	<param name="bundle.branch" value="master" />
		</antcall>
		<antcall target="clone-bundle">
		  	<param name="bundle.name" value="json.ruble" />
		  	<param name="bundle.dir.name" value="json.ruble" />
		  	<param name="bundle.branch" value="master" />
		</antcall>
		<antcall target="clone-bundle">
		  	<param name="bundle.name" value="rspec.ruble" />
		  	<param name="bundle.dir.name" value="rspec.ruble" />
		  	<param name="bundle.branch" value="master" />
		</antcall>
		<antcall target="clone-bundle">
		  	<param name="bundle.name" value="cucumber.ruble" />
		  	<param name="bundle.dir.name" value="cucumber.ruble" />
		  	<param name="bundle.branch" value="master" />
		</antcall>
		<antcall target="clone-bundle">
		  	<param name="bundle.name" value="yaml.ruble" />
		  	<param name="bundle.dir.name" value="yaml.ruble" />
		  	<param name="bundle.branch" value="master" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="capistrano.ruble" />
			<param name="bundle.dir.name" value="capistrano.ruble" />
		  	<param name="bundle.branch" value="master" />
		</antcall>
		<antcall target="clone-bundle">
		  	<param name="bundle.name" value="heroku.ruble" />
		  	<param name="bundle.dir.name" value="heroku.ruble" />
		  	<param name="bundle.branch" value="master" />
		</antcall>
		<antcall target="clone-bundle">
            <param name="bundle.name" value="shell-script.ruble" />
            <param name="bundle.dir.name" value="shell-script.ruble" />
		  	<param name="bundle.branch" value="master" />
        </antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="php.ruble" />
			<param name="bundle.dir.name" value="php.ruble" />
		  	<param name="bundle.branch" value="master" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="engineyard.ruble" />
			<param name="bundle.dir.name" value="engineyard.ruble" />
		  	<param name="bundle.branch" value="master" />
		</antcall>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do during the compilation target <name>, after the compile   -->
	<!-- but before jaring.  Substitute "name" with the name of the compilation-->
	<!-- target, eg @dot                                                       -->
	<!-- Available parameters :                                                -->
	<!--   source.foldern : n = 1 ... N, the source folders                    -->
	<!--   target.folder  : where the results of the compilation go            -->
	<!--   <name>.classpath : name = name of the compilation target. A         -->
	<!--                      reference to the classpath structure.            -->
	<!-- ===================================================================== -->
	<target name="post.compile.name">
	</target>

	<target name="post.compile.@dot">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the compilation target <name>                       -->
	<!-- Substitute "name" with the name of the compilation target, eg @dot    -->
	<!-- Available parameters :                                                -->
	<!--   jar.location - the location of the compilation results              -->
	<!--   <name>.classpath : name = name of the compilation target. A         -->
	<!--                      reference to the classpath structure.            -->
	<!-- ===================================================================== -->
	<target name="post.name">
	</target>

	<target name="post.@dot">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target gather.bin.parts                         -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder containing the build results           -->
	<!--   target.folder - destination folder                                  -->
	<!-- ===================================================================== -->
	<target name="pre.gather.bin.parts">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target gather.bin.parts                         -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder containing the build results           -->
	<!--   target.folder - destination folder                                  -->
	<!-- ===================================================================== -->
	<target name="post.gather.bin.parts">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target gather.sources                          -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="pre.gather.sources">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target gather.sources                           -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="post.gather.sources">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target gather.logs                             -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="pre.gather.logs">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target gather.logs                              -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="post.gather.logs">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target clean                                   -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="pre.clean">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target clean                                    -->
	<!-- Available parameters :                                                -->
	<!--   plugin.destination - final destination of the build                 -->
	<!--   build.result.folder - results of the compilation                    -->
	<!--   temp.folder - temporary folder                                      -->
	<!-- ===================================================================== -->
	<target name="post.clean">
	</target>
</project>
